name: Deploy ECS
env:
  AWS_ECR_REPOSITORY: azuredevopskats
  AWS_REGION: us-east-1
  DOCKER_FILE: docker/azuredevopskats-web-multi.dockerfile/Dockerfile
  #AWS_ECR_DOCKER_IMAGE_TAG: 5.1-${{ github.run_number }}-buildx-${{ github.sha }}
  AWS_ECR_DOCKER_IMAGE_TAG: 5.1-173-buildx-6b9f8b5ae028ea444cf9195af88a2b3c6fe99e8e
  BRANCH_NAME: "${{ github.ref_name }}"
  ECS_SERVICE: "${{ github.ref_name }}-devops"
  ECS_CLUSTER: "${{ github.ref_name }}-devops"
  S3_STATE_BUCKET_NAME: "devops-team-tfstate"
  BUILD_NUMBER: ${{ github.run_number }}
  DEFAULT_ECS_DESIRED_COUNT: 1

on:
  workflow_dispatch:
    inputs:
      desired_count:
        type: choice
        description: ECS Desired Count
        required: true
        default: 1
        options:
          - 0
          - 1
          - 2
          - 5

  push:
    paths:
      - "src/**"
      - "test/**"
    branches:
      - master
      - develop

jobs:
  # test-coverage:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEPLOY }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_DEPLOY }}
  #         aws-region: us-east-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  # build:
  #   needs: test-coverage
  #   runs-on: ubuntu-latest
  #   outputs:
  #     dotnet: ${{ steps.dotnet-version.outputs.dotnet }}
  #   strategy:
  #     matrix:
  #       dotnet: ["5.0.x"]

  #   steps:
  #     - id: dotnet-version
  #       run: echo "::set-output name=dotnet::${{ matrix.dotnet }}"

  #     - uses: actions/checkout@v2

  #     - name: Setup dotnet ${{ matrix.dotnet }}
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: ${{ matrix.dotnet }}

  #     - name: Install dependencies
  #       run: dotnet restore

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Available Buildx platforms
  #       run: echo ${{ steps.buildx.outputs.platforms }}

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEPLOY }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_DEPLOY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker buildx create --name mybuilder --use
  #         docker buildx build -f ${{ env.DOCKER_FILE }} --platform linux/amd64 --load  \
  #              --build-arg BUILD_NUMBER=${{ env.BUILD_NUMBER }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$AWS_ECR_DOCKER_IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$AWS_ECR_DOCKER_IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$AWS_ECR_DOCKER_IMAGE_TAG"
  deploy:
    #needs: build
    runs-on: ubuntu-latest
    outputs:
      app_url: ${{ steps.set_app_url.outputs.app_url }}
      ecs_desired_count: ${{ steps.ecs_deploy.outputs.ecs_desired_count }}
    steps:
      - name: Configure AWS credentials
        id: aws-cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEPLOY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_DEPLOY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/checkout@v2

      - uses: kayac/ecspresso@v1
        with:
          version: v1.7.5
      
      - name: Set ECS cluster and service
        run: |
          if [ "$BRANCH_NAME" != "master" ]
          then
              echo "Set new ECS cluster and servvice to develop..."
              echo "ECS_CLUSTER=develop-devops" >> $GITHUB_ENV
              echo "ECS_SERVICE=develop-devops" >> $GITHUB_ENV
              echo "BRANCH_NAME=develop" >> $GITHUB_ENV
          fi
      - name: ECS deploy
        id: ecs_deploy
        env:
          AWS_ACCOUNT_ID: ${{ steps.aws-cred.outputs.aws-account-id }}
        run: |
          echo "ACCOUNT_ID=${{ steps.aws-cred.outputs.aws-account-id }}" >> $GITHUB_ENV
          ECS_DESIRED_COUNT=${{ github.event.inputs.desired_count }}
          if [ -z "$ECS_DESIRED_COUNT" ]
          then
              ECS_DESIRED_COUNT=${{ env.DEFAULT_ECS_DESIRED_COUNT }}
          fi
          echo "::set-output name=ecs_desired_count::$ECS_DESIRED_COUNT"
          echo "ECS_DESIRED_COUNT=$ECS_DESIRED_COUNT" >> $GITHUB_ENV
          cd ecspresso
          ecspresso --ext-str branch_name=$BRANCH_NAME --ext-code desired_count=$ECS_DESIRED_COUNT verify
          SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE | jq --raw-output 'select(.services[].status != null ) | .services[].status')
          echo $SERVICE_STATUS
          if [ -z "$SERVICE_STATUS" ] || [ "$SERVICE_STATUS" == "INACTIVE" ]
          then
            ecspresso --ext-str branch_name=$BRANCH_NAME --ext-code desired_count=$ECS_DESIRED_COUNT create
          else
            ecspresso --ext-str branch_name=$BRANCH_NAME --ext-code desired_count=$ECS_DESIRED_COUNT diff
            ecspresso --ext-str branch_name=$BRANCH_NAME --ext-code desired_count=$ECS_DESIRED_COUNT deploy
          fi
      - name: Set Task Public IP
        run: |
          if (( ${{ env.ECS_DESIRED_COUNT }} > 0 )); then
            TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --query 'taskArns[0]' --output text)
            TASK_DETAILS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --task "${TASK_ARN}" --query 'tasks[0].attachments[0].details')
            ENI=$(echo $TASK_DETAILS | jq -r '.[] | select(.name=="networkInterfaceId").value')
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "${ENI}" --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
            echo "TASK_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          fi
      - name: Get Task Public IP
        id: set_app_url
        run: |
          if (( ${{ env.ECS_DESIRED_COUNT }} > 0 )); then
            echo "ECS Task Public IP: ${{ env.TASK_PUBLIC_IP }}"
            if [ "$BRANCH_NAME" != "master" ]
            then
              echo "::set-output name=app_url::${{ env.TASK_PUBLIC_IP }}:5000"
            else
              APP_URL=$(aws elbv2 describe-load-balancers --names $ECS_CLUSTER --query 'LoadBalancers[0].DNSName' --output text)
              echo "::set-output name=app_url::$APP_URL"
            fi
          fi

  health-check:
    needs: deploy
    if: needs.deploy.outputs.ecs_desired_count > 0
    runs-on: ubuntu-latest
    env:
      url: ${{needs.deploy.outputs.app_url}}/health
      max-attempts: 15
      retry-delay-sec: 5
      connect-timeout: 1
    steps:
      - name: Application health check
        run: |
          echo "ECS Task Public IP: ${{needs.deploy.outputs.app_url}}"
          curl -v --fail -s --max-time 3 --connect-timeout ${{ env.connect-timeout }} --retry ${{ env.max-attempts }} --retry-delay ${{ env.retry-delay-sec }} ${{ env.url }} -L  | jq
  
  selenium-test:
    needs: [health-check, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Selenium Test
        uses: addnab/docker-run-action@v3
        env:
          TEST_URL: "http://${{needs.deploy.outputs.app_url}}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN_AZUREKATS }}
          image: stuartshay/azuredevopskats-selenium:latest
          options: -v /tmp/assets:/tmp/assets -v /dev/shm:/dev/shm -e TEST_URL
          run: |
            echo "TEST URL: $TEST_URL"
            python3 selenium_screenshot.py $TEST_URL /tmp/assets/devops.png "1000" "500" "//body" "//target"
            ls -al /tmp/assets
      
      - name: Archive test artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-screenshots
          path: |
            /tmp/assets
      
      - name: Download a test artifact
        uses: actions/download-artifact@v2
        with:
          name: test-screenshots
