name: Deploy ECS
env:
  AWS_ECR_REPOSITORY: azuredevopskats
  AWS_REGION: us-east-1
  DOCKER_FILE: docker/azuredevopskats-web-multi.dockerfile/Dockerfile
  AWS_ECR_DOCKER_IMAGE_TAG: 5.1-buildx-test-${{ github.sha }}
  ECS_SERVICE: "${{ github.ref_name }}-devops"
  ECS_CLUSTER: "${{ github.ref_name }}-devops"
  S3_STATE_BUCKET_NAME: "devops-team-tfstate"

on:
  workflow_dispatch:
  push:
    paths:
      - "src/**"
      - "test/**"
    branches:
      - master
      - develop
      - "feature/**"
      - "fix/**"

jobs:
  test-aws:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEPLOY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_DEPLOY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

  build:
    needs: test-aws
    if: contains(github.base_ref, 'develop') || contains(github.base_ref, 'master')
    runs-on: ubuntu-latest
    outputs:
      dotnet: ${{ steps.dotnet-version.outputs.dotnet }}
    strategy:
      matrix:
        dotnet: ["5.0.x"]

    steps:
      - id: dotnet-version
        run: echo "::set-output name=dotnet::${{ matrix.dotnet }}"

      - uses: actions/checkout@v2

      - name: Setup dotnet ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Install dependencies
        run: dotnet restore

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEPLOY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_DEPLOY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ${{ env.DOCKER_FILE }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$AWS_ECR_DOCKER_IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$AWS_ECR_DOCKER_IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$AWS_ECR_DOCKER_IMAGE_TAG"

  deploy:
    needs: build
    if: contains(github.base_ref, 'develop') || contains(github.base_ref, 'master')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        id: aws-cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEPLOY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_DEPLOY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/checkout@v2

      - uses: kayac/ecspresso@v1
        with:
          version: v1.6.0

      - name: ECS deploy
        env:
          AWS_ACCOUNT_ID: ${{ steps.aws-cred.outputs.aws-account-id }}
        run: |
          echo "::set-output AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"
          cd ecspresso
          ecspresso verify
          SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE | jq --raw-output 'select(.services[].status != null ) | .services[].status')
          if [ -z "$SERVICE_STATUS" ]
          then
            ecspresso create
          else
            ecspresso diff
            ecspresso deploy
          fi

      - name: Set Task Public IP
        run: |
          TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --query 'taskArns[0]' --output text)
          TASK_DETAILS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --task "${TASK_ARN}" --query 'tasks[0].attachments[0].details')
          ENI=$(echo $TASK_DETAILS | jq -r '.[] | select(.name=="networkInterfaceId").value')
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "${ENI}" --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          echo "TASK_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Get Task Public IP
        run: |
          echo "ECS Task Public IP: ${{ env.TASK_PUBLIC_IP }}"
