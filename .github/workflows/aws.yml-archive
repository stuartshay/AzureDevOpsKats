name: AWS ECR Deploy
env:
  AWS_ECR_REGISTRY: 816939196156.dkr.ecr.us-east-1.amazonaws.com
  AWS_ECR_REPOSITORY: azuredevopskats
  AWS_REGION: us-east-1
  DOCKER_FILE: docker/azuredevopskats-web-multi.dockerfile/Dockerfile
  AWS_ECR_DOCKER_IMAGE: azuredevopskats
  AWS_ECR_DOCKER_IMAGE_TAG: 5.1-buildx-${{ github.sha }}
  ECS_TASK_DEFINITION: .aws/task-definition1.json
  BUILD_NUMBER: "01" ##${{ github.sha }}
  CONTAINER_NAME: "nginx"
  ECS_SERVICE: "FG-StagingDemo"
  ECS_CLUSTER: "FG-StagingDemo"

on:
  workflow_dispatch:
  push:
    paths:
      - "src/**"
      - "test/**"
      - ".github/workflows/aws.yml"
    branches:
      - master
      - develop
      - "feature/**"
      - "fix/**"

jobs:
  test-aws:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_AZUREKATS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_AZUREKATS }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

  build:
    needs: test-aws
    runs-on: ubuntu-latest
    outputs:
      dotnet: ${{ steps.dotnet-version.outputs.dotnet }}
    strategy:
      matrix:
        dotnet: ["5.0.x"]

    steps:
      - id: dotnet-version
        run: echo "::set-output name=dotnet::${{ matrix.dotnet }}"

      - uses: actions/checkout@v2

      - name: Setup dotnet ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Install dependencies
        run: dotnet restore

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_AZUREKATS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_AZUREKATS }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ${{ env.DOCKER_FILE }} -t $AWS_ECR_REGISTRY/$ECR_REPOSITORY:$AWS_ECR_DOCKER_IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$AWS_ECR_DOCKER_IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: ECS describe-task-definition
        run: |
          aws ecs describe-task-definition --task-definition FG-StagingDemo:1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
