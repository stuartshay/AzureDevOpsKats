- name: Jumpbox server setup for multiple users
  hosts: all
  become: true
  vars_files:
    - vars.yml

  tasks:  
  - name: Install dependency packages
    apt:
      name: "{{ basic_packages }}"
      state: present
      update_cache: yes

  - name: Create the /tmp/efs-utils directory
    ansible.builtin.file:
      mode: 0755
      path: /tmp/efs-utils
      state: directory

  - name: Download a tarball of the aws/efs-utils repository
    ansible.builtin.unarchive:
      src: https://github.com/aws/efs-utils/tarball/master
      dest: /tmp/efs-utils
      remote_src: yes
      extra_opts:
        - "--strip-components=1"

  - name: Build deb packages from the aws/efs-utils code
    command: ./build-deb.sh
    args:
      chdir: /tmp/efs-utils
      creates: /tmp/efs-utils/build

  - name: Find all aws/efs-utils deb packages that were built
    ansible.builtin.find:
      paths: /tmp/efs-utils/build
      patterns: "amazon-efs-utils*.deb"
    register: find_result

  - name: Install aws/efs-utils deb packages
    ansible.builtin.apt:
      deb: "{{ item }}"
    loop: "{{ find_result | json_query('files[*].path') }}"
    
  - name: Check aws cli executable is present
    shell: "which aws"
    register: aws_cli_result
    ignore_errors: true

  - name: Install AWS CLI v2
    shell: cd /tmp && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && ./aws/install
    when: aws_cli_result.rc != 0

  - name: Add vscode GPG key
    apt_key:
      url: https://packages.microsoft.com/keys/microsoft.asc
      state: present

  - name: Add vscode repository to apt
    apt_repository:
      repo: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
      state: present

  - name: Install vscode
    apt:
      name: "{{item}}"
      state: latest
      update_cache: yes
    loop:
      - code

  - name: Add docker GPG key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add docker repository to apt
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Install docker
    apt:
      name: "{{item}}"
      state: latest
      update_cache: yes
    loop:
      - docker-ce
      - docker-ce-cli
      - containerd.io

  - name: Start and enable docker
    service:
      name: docker
      state: started
      enabled: yes

  - name: Install docker compose
    shell: curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

  - name: Change docker-compose permissions
    ansible.builtin.file:
      path: /usr/local/bin/docker-compose
      mode: '0755'
  
  - name: Copy startup to /home/ubuntu/startup.sh
    copy:
      src: "startup.sh"
      dest: "/home/ubuntu/startup.sh"
      owner: ubuntu
      group: ubuntu
      mode: '0755'

  - name: Install ubuntu-desktop
    apt:
      name: "{{ desktop_packages }}"
      state: latest
      update_cache: yes

  - name: Copy xstartup to /home/ubuntu/.vnc/xstartup
    copy:
      src: "xstartup"
      dest: "/home/ubuntu/.vnc/xstartup"
      owner: ubuntu
      group: ubuntu
      mode: '0755'

  - name: Copy systemd for vncserver
    copy:
      src: "{{ item }}.service"
      dest: "/usr/lib/systemd/system/{{ item }}.service"
      mode: '0644'
    loop:
      - vncserver
    notify:
      - restart_vncserver

  - name: Copy systemd for my-startup
    copy:
      src: "{{ item }}.service"
      dest: "/usr/lib/systemd/system/{{ item }}.service"
      mode: '0644'
    loop:
      - my-startup

  - name: Enable a systemd units
    ansible.builtin.systemd:
      name: "{{ item }}"
      state: started
      enabled: yes
    loop:
      - my-startup
      - vncserver

  - name: Just force systemd to reread configs
    ansible.builtin.systemd:
      daemon_reload: yes

  handlers:
    - name: restart_vncserver
      service:
        name: vncserver
        state: restarted